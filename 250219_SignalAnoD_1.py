# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/154vLp_5kdtSXLnRZJJUPJ3FdHHxw52r7
"""

import streamlit as st
import zipfile
import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Function to extract ZIP structure
def extract_zip_structure(zip_path):
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        file_structure = {}
        for file in zip_ref.namelist():
            parts = file.split('/')
            if len(parts) > 1:
                folder, filename = parts[0], parts[-1]
                if folder not in file_structure:
                    file_structure[folder] = []
                if filename.endswith('.csv'):
                    file_structure[folder].append(filename)
            else:
                if 'root' not in file_structure:
                    file_structure['root'] = []
                if file.endswith('.csv'):
                    file_structure['root'].append(file)
    return file_structure

# Streamlit UI Setup
st.title("Laser Welding Data Visualization & Anomaly Detection")

# Upload ZIP File
uploaded_file = st.file_uploader("Upload ZIP file", type=["zip"])

if uploaded_file:
    zip_path = "temp.zip"
    with open(zip_path, "wb") as f:
        f.write(uploaded_file.getbuffer())

    # Extract ZIP Structure
    file_structure = extract_zip_structure(zip_path)
    folders = list(file_structure.keys())

    # Folder Selection
    if len(folders) > 1:
        selected_folder = st.selectbox("Select Folder", folders)
    else:
        selected_folder = folders[0]

    # CSV File Selection
    csv_files = file_structure[selected_folder]
    selected_csv = st.selectbox("Select CSV File", csv_files)

    # Load and Display Raw Data
    if st.button("See Raw Data"):
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            with zip_ref.open(f"{selected_folder}/{selected_csv}") as f:
                df = pd.read_csv(f)

                # Plot Raw Data
                fig, axes = plt.subplots(3, 1, figsize=(10, 8))
                for i, col in enumerate(df.columns[:3]):
                    axes[i].plot(df[col])
                    axes[i].set_title(col)
                st.pyplot(fig)

    # Bead Segmentation Inputs
    filter_column = st.selectbox("Select Filter Column", df.columns[:3])
    filter_threshold = st.number_input("Set Filter Threshold", value=0.0)

    if st.button("Start Bead Segmentation"):
        filter_values = df[filter_column].astype(float)
        start_points, end_points = [], []
        i = 0
        while i < len(filter_values):
            if filter_values[i] > filter_threshold:
                start = i
                while i < len(filter_values) and filter_values[i] > filter_threshold:
                    i += 1
                end = i - 1
                start_points.append(start)
                end_points.append(end)
            else:
                i += 1
        bead_counts = [end - start + 1 for start, end in zip(start_points, end_points) if (end - start + 1) >= 10]

        # Heatmap Visualization
        heatmap_data = pd.DataFrame(bead_counts, columns=["Bead Count"])
        fig, ax = plt.subplots(figsize=(8, 6))
        sns.heatmap(heatmap_data.T, cmap="jet", cbar=True, xticklabels=False)
        st.pyplot(fig)